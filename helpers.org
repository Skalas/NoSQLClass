#+AUTHOR: Prof. Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+TITLE: Helpers to startup Databases

* Mongo
** Inicio de Mongo

#+begin_src shell
  # Crear el volumen de mongo
  docker volume create mongo-data
  #Detener el contenedor
  docker stop mongo
  # Borrar el contenedor
  docker rm mongo
  # Correr el docker
  docker run -p 27017:27017 \
         -v mongo-data:/data/db \
         --name mongo \
         -d \
         mongo
#+end_src

** Correr el shell de mongo
#+begin_src shell
  docker exec -it mongo mongosh
#+end_src
** Iniciar el contenedor Mongo
#+begin_src shell
  docker start mongo
#+end_src
* Cassandra
** Daemon de Cassandra
#+begin_src shell

  docker volume create cassandra-data
  docker stop cassandra
  docker rm cassandra
  docker run \
         -v cassandra-data:/var/lib/cassandra \
         -p 9042:9042 \
         --name cassandra \
         -d cassandra:latest
#+end_src
** Shell de Cassandra
#+begin_src shell
  docker exec -it cassandra cqlsh
#+end_src
** Iniciar el contenedor de cassandra
#+begin_src shell
  docker start cassandra
#+end_src
* Postgres
** Daemon de postgres
#+begin_src shell
  docker volume create postgresql-data
  docker stop postgres
  docker rm postgres
  docker run -p 5432:5432 \
         -v postgresql-data:/var/lib/postgresql/data \
         -e POSTGRES_PASSWORD=postgres \
         --name postgres \
         -d \
         postgres
#+end_src
** Cliente de postgres
#+begin_src shell
  docker exec -it postgres psql -Upostgres
#+end_src
** Iniciar el contenedor de postgres
#+begin_src shell
  docker start postgres
#+end_src

* Neo4j
** Motor
#+begin_src shell
  docker volume create neo4j-data
  docker stop neo4j
  docker rm neo4j
  docker run \
  	 --publish=7474:7474 --publish=7687:7687 \
  	 --volume=neo4j-data:/data \
  	 -d \
  	 --name neo4j \
  	 neo4j
#+end_src

** Cliente Cypher - conexión local
#+begin_src shell
docker exec -it neo4j cypher-shell
#+end_src

** Cliente Cypher - conexión remota
#+begin_src shell
  docker run -it neo4j cypher-shell -a <IP>
#+end_src
** Script de instalación
#+begin_src shell
  curl -fsSL https://debian.neo4j.com/neotechnology.gpg.key |sudo gpg --dearmor -o /usr/share/keyrings/neo4j.gpg
  echo "deb [signed-by=/usr/share/keyrings/neo4j.gpg] https://debian.neo4j.com stable 4.1" | sudo tee -a /etc/apt/sources.list.d/neo4j.list
  sudo apt update && sudo apt install -y neo4j
  sudo systemctl enable neo4j.service
  sudo systemctl start neo4j.service

#+end_src

* Ubuntu

#+begin_src shell
  docker run \
	 -v /Users/miguelescalante/test/:/root/ \
	 --name ubuntu \
	 -it \
	 ubuntu:latest
#+end_src
